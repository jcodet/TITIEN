// Les services pour le pipeline
def versionService, releaseVersion, imageVersion

// Les services pour le pipeline
def dockerService

// Les containers Docker
def mvn

  catchError {

    stage('INIT') {
         node('master') {

            //supression des actions git locales (commits, tags...)
            sh "rm -rf * .git"
            //checkout du commit qui a déclenché le build
            checkout scm

           dockerService = load 'pipeline/utils/DockerService.groovy'
           versionService = load 'pipeline/utils/myScript.groovy'
           releaseVersion = versionService.getReleaseVersion('application/')
           imageVersion = versionService.images()

           echo "Construction de la V${releaseVersion}"

           mvn = docker.image("${imageVersion['maven']}")

         }
    }
    node('master') {
      stage('BUILD BACK') {
        sh "rm -rf * .git"
        checkout scm
        def workspace = pwd()

          try {
            mvn.pull()
           //sh "docker run --rm -v ${workspace}/application:/app -v ~/.m2/repository/:/root/.m2/repository/ -v ${workspace}/settings/maven/:/root/.m2/ ${mvn.imageName()} clean verify -B -Pintegration"
		milestone()
        } catch (Exception e) {
            echo "Build Back KO ${env.JOB_NAME} <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
            throw e
        } finally {
            //step([$class: 'JUnitResultArchiver', testResults: '**/target/*-reports/TEST-*.xml'])
        }
stage('PACKAGE') {
	releaseVersion = versionService.getReleaseVersion('application/')
}
      }

    }

}
