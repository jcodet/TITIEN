// Les services pour le pipeline
def versionService, releaseVersion, imageVersion

// Les services pour le pipeline
def dockerService

// Les containers Docker
def mvn

catchError {
  node('master') {
    stage('INIT') {
      //supression des actions git locales (commits, tags...)
      sh "rm -rf * .git"

      //checkout du commit qui a déclenché le build
      checkout scm

      versionService = load 'pipeline/utils/myScript.groovy'
      credentialService = load 'pipeline/utils/CredentialService.groovy'
      dockerService = load 'pipeline/utils/DockerService.groovy'
      releaseVersion = versionService.getReleaseVersion('application/')
      environmentService = load 'pipeline/utils/EnvironmentService.groovy'
      imageVersion = versionService.images()

      echo "Construction de la V${releaseVersion}"
      mvn = docker.image("${imageVersion['maven']}")

    }

    stage('BUILD BACK') {
      sh "rm -rf * .git"
      checkout scm
      def workspace = pwd()

      try {
        mvn.pull()
        sh "docker run --rm -v ${workspace}/application/:/app -v ~/.m2/repository/:/root/.m2/repository/ -v ${workspace}/settings/maven/:/root/.m2/ ${mvn.imageName()} -f /app/pom.xml clean verify -B"
        //mvn "org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.failure.ignore=true -Pcoverage-per-test"
        milestone()
      } catch (Exception e) {
        echo "Build Back KO ${env.JOB_NAME} <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
        throw e
      } finally {
      //step([$class: 'JUnitResultArchiver', testResults: '**/target/*-reports/TEST-*.xml'])
      }
    }
    stage('PACKAGE') {
      releaseVersion = versionService.getReleaseVersion('application/')
      echo "Release version is $releaseVersion"

    }
    stage('DEPLOY') {
      //environmentService.deployWithAnsible(ansible, environments.INT)

    }
  }
}
